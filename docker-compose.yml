version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: agricredit
      POSTGRES_USER: agricredit
      POSTGRES_PASSWORD: agricredit123
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U agricredit -d agricredit"]
      interval: 10s
      timeout: 5s
      retries: 5

   # Redis Cache
   redis:
     image: redis:7-alpine
     ports:
       - "6379:6379"
     volumes:
       - redis_data:/data
     healthcheck:
       test: ["CMD", "redis-cli", "ping"]
       interval: 10s
       timeout: 5s
       retries: 5

   # IPFS Node
   ipfs:
     image: ipfs/go-ipfs:v0.21.0
     ports:
       - "4001:4001"
       - "5001:5001"
       - "8080:8080"
     volumes:
       - ipfs_data:/data/ipfs
     environment:
       - IPFS_PROFILE=server
     healthcheck:
       test: ["CMD", "ipfs", "version"]
       interval: 30s
       timeout: 10s
       retries: 3

   # Celery Worker
   celery_worker:
     build: ./backend
     command: celery -A app.core.tasks worker --loglevel=info
     environment:
       - DATABASE_URL=postgresql://agricredit:agricredit123@db:5432/agricredit
       - REDIS_URL=redis://redis:6379
       - CELERY_BROKER_URL=redis://redis:6379/0
       - CELERY_RESULT_BACKEND=redis://redis:6379/0
     depends_on:
       - db
       - redis
     volumes:
       - ./backend/models:/app/models:ro
     restart: unless-stopped

   # Prometheus Monitoring
   prometheus:
     image: prom/prometheus:latest
     ports:
       - "9090:9090"
     volumes:
       - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
       - prometheus_data:/prometheus
     command:
       - '--config.file=/etc/prometheus/prometheus.yml'
       - '--storage.tsdb.path=/prometheus'
       - '--web.console.libraries=/etc/prometheus/console_libraries'
       - '--web.console.templates=/etc/prometheus/consoles'
       - '--storage.tsdb.retention.time=200h'
       - '--web.enable-lifecycle'
     restart: unless-stopped

   # Backend API
   backend:
     build: ./backend
     environment:
       - DATABASE_URL=postgresql://agricredit:agricredit123@db:5432/agricredit
       - REDIS_URL=redis://redis:6379
       - CELERY_BROKER_URL=redis://redis:6379/0
       - CELERY_RESULT_BACKEND=redis://redis:6379/0
       - IPFS_API_URL=http://ipfs:5001
       - SECRET_KEY=your-production-secret-key-change-this
       - ALLOWED_ORIGINS=http://localhost:3000,http://frontend:3000
       - ALLOWED_HOSTS=backend,localhost,127.0.0.1
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./backend/models:/app/models:ro
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Frontend
  frontend:
    build: ./src
    environment:
      - NEXT_PUBLIC_API_URL=http://backend:8000
    ports:
      - "3000:3000"
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/ssl/certs:ro
    depends_on:
      - frontend
      - backend
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  ipfs_data:
  prometheus_data: